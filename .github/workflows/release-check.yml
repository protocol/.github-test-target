name: Release Checker
on:
  pull_request:
    paths: [ 'version.json' ]
    branches: [ master ]

jobs:
  releaser:
    runs-on: ubuntu-latest
    env:
      COMPARETO: "" # most recent tag on current branch
      VERSION: ""
      GORELEASE: ""
      GOCOMPAT: ""
      GOMODDIFF: ""
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17.x"
      - name: Install semver (node command line tool)
        run: npm install -g semver@v7.3.5
      - name: Determine version
        run: echo "VERSION=$(jq -r .version version.json)" >> $GITHUB_ENV
      - name: Check version
        run: semver ${{ env.VERSION }} # fails if the version is not a valid semver version
      - name: Determine version number to compare to
        run: |
          git fetch origin --tags
          go install github.com/marten-seemann/semver-highest@latest
          v=$(semver-highest -target ${{ env.VERSION }} -versions $(git tag | paste -sd , -))
          echo "compare to: $v"
          echo "COMPARETO=$v" >> $GITHUB_ENV
      - name: Install Compat Check
        run: go install github.com/smola/gocompat/cmd/gocompat@8498b97a44792a3a6063c47014726baa63e2e669 # 2021.7 (v0.3.0)
      - name: run git diff on go.mod file(s)
        if: env.COMPARETO != ''
        uses: protocol/multiple-go-modules@v1.2
        with:
          run: |
            output=$GOMODIFF
            output+=$(git diff ${{ env.COMPARETO }} -- ./go.mod)
            if [[ -z "$output" ]]; then
              output="(empty)"
            fi
            echo "GOMODDIFF=$output" >> $GITHUB_ENV
      - name: Run gorelease
        id: gorelease
        if: env.COMPARETO != '' && env.VERSION != env.COMPARETO
        run: |
          go install golang.org/x/exp/cmd/gorelease@v0.0.0-20210729172720-737cce5152fc
          output=$((gorelease -base ${{ env.COMPARETO }}) 2>&1 || true)
          # dealing with multi-line strings in GitHub Actions is a pain
          echo "GORELEASE<<EOF" >> $GITHUB_ENV
          echo "$output" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Check Compatibility
        if: env.COMPARETO != '' && env.VERSION != env.COMPARETO
        run: |
          status=0
          output=$(gocompat compare --go1compat --git-refs="${{ env.COMPARETO }}..$GITHUB_SHA" ./...) || status=$?
          if [[ $status != 0 ]]; then
            echo "incompatible"
            # dealing with multi-line strings in GitHub Actions is a pain
            echo "GOCOMPAT<<EOF" >> $GITHUB_ENV
            echo "$output" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "GOCOMPAT=(empty)" >> $GITHUB_ENV
          fi
      - name: debug
        run: cat "$GITHUB_EVENT_PATH" | jq -M .
      - name: Post output
        uses: marocchino/sticky-pull-request-comment@82e7a0d3c51217201b3fedc4ddde6632e969a477 # v2.1.1
        if: env.VERSION != env.COMPARETO
        with:
          header: release-check
          recreate: true
          message: |
            Most recent release is: [`${{ env.COMPARETO }}`](${{ github.event.base.repo.html_url }}/releases/tag/${{ env.COMPARETO }})

            `git diff` for `go.mod` files says:
            ```diff
            ${{ env.GOMODDIFF }}
            ```

            `gorelease` says:
            ```
            ${{ env.GORELEASE }}
            ```

            `gocompat` says:
            ```
            ${{ env.GOCOMPAT }}
            ```

